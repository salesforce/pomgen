import unittest
from generate.impl.py.requirementsparser import RequirementsParser


CONTENT = """
#
# This file is autogenerated by pip-compile with Python 3.11
# by the following command:
#
#    bazel run //:requirements.update
#
--extra-index-url https://proxy.net/nexus/repository/pypi/
--trusted-host proxy.net

    # via pydantic
    # httpx
ansi==0.3.7 \
    --hash=sha256:7e59108922259e03c54e4d93fc611bba0e756513086849708b86b6c80f8d4cd4 \
    --hash=sha256:bdd9e3c2dc3e4c8df8c2b745ca6f07f715aa4edee5ed4a5bcb29065da06a3f71
    # via cffi
pydantic==2.10.5 \
    --hash=sha256:278b38dbbaec562011d659ee05f63346951b3a248a6f3642e1bc68894ea2b4ff \
    --hash=sha256:4dd4e322dbe55472cb7ca7e73f4b63574eecccf2835ffa2af9021ce113c83c53
    # via
    #   httpx
    #   -r tools/pip/requirements.in
    #   llama-cloud
cffi==1.17.1 \
    --hash=sha256:045d61c734659cc045141be4bae381a41d89b741f795af1dd018bfb532fd0df8
    --hash=sha256:fc48c783f9c87e60831201f2cce7f3b2e4846bf4d8728eabe54d60700b318a0b
    # via uvicorn
httpx==0.27.2 \
    --hash=sha256:7bb2708e112d8fdd7829cd4243970f0c223274051cb35ee80c03301ee29a3df0 \
    --hash=sha256:f7c2be1d2f3c3c3160d441802406b206c2b76f5947b11115e6df10c6c65e66c2
uvicorn[standard]==0.34.0 \
    --hash=sha256:023dc038422502fa28a09c7a30bf2b6991512da7dcdb8fd35fe57cfc154126f4 \
    --hash=sha256:404051050cd7e905de2c9a7e61790943440b3416f49cb409f965d9dcd0fa73e9
    # via -r tools/pip/requirements.in
uvloop==0.21.0 \
    --hash=sha256:0878c2640cf341b269b7e128b1a5fed890adc4455513ca710d77d5e93aa6d6a0
llama-cloud==0.1.15 \
    --hash=sha256:3ec98422072ee4290c1e7597bc33889af3f03edb2a50ab09c15d5586d9f8635c \
    --hash=sha256:8e7376346d580b244a87d023eb7493506f06b53c898fb2a2e712b9fe7eb5b310
"""


class RequirementsParserTest(unittest.TestCase):

    def setUp(self):
        self.parser = RequirementsParser()

    def test_parse_requirements_lock_file(self):
        dependencies = self.parser.parse_requirements_lock_file(CONTENT)

        self.assertEqual(7, len(dependencies))
        ansi = dependencies[0]
        self.assertEqual("ansi", ansi.name)
        self.assertEqual("0.3.7", ansi.version)
        self.assertEqual(0, len(ansi.extras))
        pydantic = dependencies[1]
        self.assertEqual("pydantic", pydantic.name)
        self.assertEqual("2.10.5", pydantic.version)
        self.assertEqual(0, len(pydantic.extras))
        cffi = dependencies[2]
        self.assertEqual("cffi", cffi.name)
        self.assertEqual("1.17.1", cffi.version)
        self.assertEqual(0, len(cffi.extras))
        httpx = dependencies[3]
        self.assertEqual("httpx", httpx.name)
        self.assertEqual("0.27.2", httpx.version)
        self.assertEqual(0, len(httpx.extras))
        uvicorn = dependencies[4]
        self.assertEqual("uvicorn", uvicorn.name)
        self.assertEqual("0.34.0", uvicorn.version)
        self.assertEqual("standard", uvicorn.extras[0])
        uvloop = dependencies[5]
        self.assertEqual("uvloop", uvloop.name)
        self.assertEqual("0.21.0", uvloop.version)
        self.assertEqual(0, len(uvloop.extras))
        llama_cloud = dependencies[6]
        self.assertEqual("llama-cloud", llama_cloud.name)
        self.assertEqual("0.1.15", llama_cloud.version)
        self.assertEqual(0, len(llama_cloud.extras))

        self.assertEqual(1, len(pydantic.child_dependencies))
        self.assertIs(pydantic.child_dependencies[0], ansi)
        self.assertEqual(1, len(cffi.child_dependencies))
        self.assertIs(cffi.child_dependencies[0], pydantic)
        self.assertEqual(2, len(httpx.child_dependencies))
        self.assertIs(httpx.child_dependencies[0], ansi)
        self.assertIs(httpx.child_dependencies[1], cffi)
        self.assertEqual(1, len(llama_cloud.child_dependencies))
        self.assertIs(llama_cloud.child_dependencies[0], cffi)
        self.assertEqual(1, len(uvicorn.child_dependencies))
        self.assertIs(uvicorn.child_dependencies[0], httpx)
        self.assertEqual(0, len(uvloop.child_dependencies))


if __name__ == '__main__':
    unittest.main()
