"""
Copyright (c) 2018, salesforce.com, inc.
All rights reserved.
SPDX-License-Identifier: BSD-3-Clause
For full license text, see the LICENSE file in the repo root or https://opensource.org/licenses/BSD-3-Clause
"""

import extdeps_pomgen
import os
import tempfile
import unittest

class ExtDepsPomgenTest(unittest.TestCase):

    def test_extdeps_pomgens(self):
        self._setup_workspace()
        args = ("--repo_root", self.repo_root_path,)

        pom = extdeps_pomgen.main(args)

        self.assertIn("<groupId>com.google.guava</groupId>", pom)
        self.assertIn("<artifactId>guava</artifactId>", pom)
        self.assertIn("<version>23.0</version", pom)

        self.assertIn("<groupId>org.apache.commons</groupId>", pom)
        self.assertIn("<artifactId>commons-lang3</artifactId>", pom)
        self.assertIn("<version>3.9</version", pom)

        self.assertIn("<groupId>org.apache.commons</groupId>", pom)
        self.assertIn("<artifactId>commons-lang3</artifactId>", pom)
        self.assertIn("<version>3.9</version", pom)

        self.assertIn("<groupId>org.apache.commons</groupId>", pom)
        self.assertIn("<artifactId>commons-math3</artifactId>", pom)
        self.assertIn("<version>3.6.1</version", pom)

    def _setup_workspace(self):
        self.repo_root_path = tempfile.mkdtemp("monorepo")
        self._add_WORKSPACE_file()
        self._add_maven_install_json_file()
        self._add_pom_template()

    def _add_WORKSPACE_file(self):
        self._write_file("", "", "WORKSPACE", "needs to exist")

    def _add_maven_install_json_file(self):
        content = """
{
    "dependency_tree": {
        "__AUTOGENERATED_FILE_DO_NOT_MODIFY_THIS_FILE_MANUALLY": -1063907353,
        "conflict_resolution": {},
        "dependencies": [
            {
                "coord": "com.google.guava:guava:23.0",
                "dependencies": [],
                "directDependencies": [],
                "exclusions": [
                    "*:*"
                ],
                "file": "v1/https/repo1.maven.org/maven2/com/google/guava/guava/23.0/guava-23.0.jar",
                "mirror_urls": [
                    "https://repo1.maven.org/maven2/com/google/guava/guava/23.0/guava-23.0.jar"
                ],
                "sha256": "7baa80df284117e5b945b19b98d367a85ea7b7801bd358ff657946c3bd1b6596",
                "url": "https://repo1.maven.org/maven2/com/google/guava/guava/23.0/guava-23.0.jar"
            },
            {
                "coord": "org.apache.commons:commons-lang3:3.9",
                "dependencies": [],
                "directDependencies": [],
                "exclusions": [
                    "*:*"
                ],
                "file": "v1/https/repo1.maven.org/maven2/org/apache/commons/commons-lang3/3.9/commons-lang3-3.9.jar",
                "mirror_urls": [
                    "https://repo1.maven.org/maven2/org/apache/commons/commons-lang3/3.9/commons-lang3-3.9.jar"
                ],
                "sha256": "de2e1dcdcf3ef917a8ce858661a06726a9a944f28e33ad7f9e08bea44dc3c230",
                "url": "https://repo1.maven.org/maven2/org/apache/commons/commons-lang3/3.9/commons-lang3-3.9.jar"
            },
            {
                "coord": "org.apache.commons:commons-math3:3.6.1",
                "dependencies": [],
                "directDependencies": [],
                "exclusions": [
                    "*:*"
                ],
                "file": "v1/https/repo1.maven.org/maven2/org/apache/commons/commons-math3/3.6.1/commons-math3-3.6.1.jar",
                "mirror_urls": [
                    "https://repo1.maven.org/maven2/org/apache/commons/commons-math3/3.6.1/commons-math3-3.6.1.jar"
                ],
                "sha256": "1e56d7b058d28b65abd256b8458e3885b674c1d588fa43cd7d1cbb9c7ef2b308",
                "url": "https://repo1.maven.org/maven2/org/apache/commons/commons-math3/3.6.1/commons-math3-3.6.1.jar"
            }
        ],
        "version": "0.1.0"
    }
}
        """
        self._write_file("", "", "maven_install.json", content)

    def _add_pom_template(self):
        content = "#{dependencies}"
        self._write_file("config", "", "pom_template.xml", content)

    def _write_file(self, package_rel_path, rel_path, filename, content):
        path = os.path.join(self.repo_root_path, package_rel_path, rel_path, 
                            filename)
        parent_dir = os.path.dirname(path)
        if not os.path.exists(parent_dir):
            os.makedirs(parent_dir)
        with open(path, "w") as f:
            f.write(content)

if __name__ == '__main__':
    unittest.main()
